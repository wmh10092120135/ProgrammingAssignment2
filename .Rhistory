message("getting data")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x=c(1,2,3,4))
a=makeVector(x=c(1,2,3,4))
a$get()
a$getmean()
a$setmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(mean) {m=mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a=makeVector(x=c(1,2,3,4))
a$get()
a$getmean()
a$setmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(m) {m=mean(x)}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a=makeVector(x=c(1,2,3,4))
a$get()
a$getmean()
a$setmean(m)
a$getmean()
m
a$setmean(m)
a$set()
y=c(2,3,4,5)
a$set()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(m) {m=mean(x)}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a$set()
x=y
a$set()
a$set(y)
a$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x}
setmean <- function(m) {m=mean(x)}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a=makeVector(x=c(1,2,3,4))
a
makeCacheMatrix <- function(x = matrix()) {
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(m){
m=solve(x)
}                   ## this function will set the value of m as the inverse of x
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a, ...) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m=solve(x)
a$setinverse(m)
m
}
}
a=makeCacheMatrix(x=matrix(2:10,3,3))
a$get()
solve(x)
x
x=matrix(2:10,3,3)
solve(x)
x=matrix(3:11,3,3)
solve(x)
x=matrix(c(1,3,4,7,2,3,5,7,9),3,3)
solve(x)
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
a$get()
cacheSolve(a)
a=makeCacheMatrix(x=matrix(c(2,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
a$get()
x=matrix(c(2,3,4,7,2,3,5,7,9),3,3)
solve(x)
a=makeCacheMatrix(x=matrix(c(2,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(m){
m=solve(data)
}                   ## this function will set the value of m as the inverse of x
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a, ...) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m=solve(data)
a$setinverse(m)
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
a$get()
a$setinverse()
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(m){
m=m1
}                   ## this function will reset the value of m
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a, ...) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m1=solve(data)
a$setinverse(m)
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(m){
m=solve()
}                   ## this function will reset the value of m
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a, ...) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m=solve(data)
a$setinverse(m)
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
a
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
a$getinverse
a$getinverse()
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(m){
m=solve()
}                   ## this function will reset the value of m
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m=solve(data)
a$setinverse(m)
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
data=a$get()
data
m=solve(data)
m
a$setinverse(m)
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(){
m=m1
}                   ## this function will reset the value of m
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m1=solve(data)
a$setinverse(m)
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(){
m=m1
}                   ## this function will reset the value of m
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m1=solve(data)
a$setinverse()
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
m1=solve(data)
m1
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(){
m=m1
}                   ## this function will set the value of m as the inverse of 'x'
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
a$setinverse()
cacheSolve <- function(a) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m1=solve(data)
a$setinverse()
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
a$setinverse()
cacheSolve(a)
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(){
m=m1
}                   ## this function will set the value of m as the inverse of 'x'
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m1=solve(data)
a$setinverse()
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
a$get()
cacheSolve(a)
m
m1
data
m1=solve(data)
m1
a$setinverse()
m
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(){
m=m1
}                   ## this function will set the value of m as the inverse of 'x'
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
## The followed function will return the iverse of the matrix ('x') in the above function.
## If the inverse was calculated, it will retrieve the inverse from the cache.
## Otherwise, it will calculate the inverse again.
cacheSolve <- function(a) { ## a is the vector created with the above function
## the code should be "a=makeCacheMatrix(x=matrix())"
m=a$getinverse()         ## set the value of m as the inverse of 'x'
if(!is.null(m)){
message("getting cached inverse")
return(m)
}                        ## this judge is to see if the inverse of 'x' is ever calculated
## and to determine to retrieve the inverse or calculate a new one
else{
data=a$get()
m1=solve(data)
a$setinverse()
m
}
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
cacheSolve(a)
## These two functions could cache the inverse of a certain matrix.
## And when it is calculated again, the functions could retrieve the inverse from the cache.
## The followed function will do cache the inverse of a certain matrix
makeCacheMatrix <- function(x = matrix()) {  ##'x' should be a invertable matrix
m=NULL                      ## set the value of m as NULL
get=function(){x}           ## this function will get the value of x
getinverse=function(){
m
}                   ## this function will get the value of m
setinverse=function(){
m=m1
}                   ## this function will set the value of m as the inverse of 'x'
list(get=get,
getinverse=getinverse, ## create a vector of a list containing the 3 functions above
setinverse=setinverse)
}
a=makeCacheMatrix(x=matrix(c(1,3,4,7,2,3,5,7,9),3,3))
m
